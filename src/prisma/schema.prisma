generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int                 @id @default(autoincrement())
  name               String
  image              String?
  email              String              @unique
  password           String?
  phone_number       String?             @unique
  admin              Boolean             @default(false)
  verified           Boolean             @default(false)
  createdAt          DateTime            @default(now())
  updated_at         DateTime            @updatedAt
  google_id          String?             @unique
  carts              Cart?
  facebookAccount    FacebookAccount?
  formEntries        FormEntry[]
  news               News[]
  notifications      Notification[]
  orders             Order[]
  orderCancellations OrderCancellation[]
  reviews            Review[]
  transactions       Transaction[]
}

model FacebookAccount {
  id                  String   @id @default(uuid())
  facebook_id         String   @unique
  access_token        String
  token_expires       DateTime
  page_id             String
  page_name           String
  name                String
  image               String?
  email               String
  userId              Int      @unique
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  page_access_token   String?
  ig_user_id          String?
  instagramAccount_id String?
  instagram_username  String?
  user                User     @relation(fields: [userId], references: [id])
}

model Notification {
  id          Int      @id @default(autoincrement())
  name        String
  viewed      Boolean  @default(false)
  description String
  user_id     Int
  order_id    Int?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  user        User     @relation(fields: [user_id], references: [id])
  order       Order?   @relation(fields: [order_id], references: [id])
}

model Partner {
  id                 Int         @id @default(autoincrement())
  name               String
  owner_name         String
  phone_number       String
  created_at         DateTime    @default(now())
  updated_at         DateTime    @updatedAt
  ordersItems        OrderItem[]
  products           Product[]
}

model Product {
  id          Int         @id @default(autoincrement())
  name        String
  price       Int
  description String?
  image       String?
  weight      Int?
  partner_id  Int
  created_at  DateTime    @default(now())
  updated_at  DateTime    @updatedAt
  cartItems   CartItem[]
  inventory   Inventory?
  orderItems  OrderItem[]
  partner     Partner     @relation(fields: [partner_id], references: [id])
  reviews     Review[]
}

model Inventory {
  id          Int      @id @default(autoincrement())
  products_id Int      @unique
  stock       Int
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  product     Product  @relation(fields: [products_id], references: [id], onDelete: Cascade)
}

model Transaction {
  id           Int               @id @default(autoincrement())
  user_id      Int
  status       TransactionStatus
  total_amount Int
  created_at   DateTime          @default(now())
  updated_at   DateTime          @updatedAt
  user         User              @relation(fields: [user_id], references: [id])
}

model Cart {
  id         Int        @id @default(autoincrement())
  user_id    Int        @unique
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  user       User       @relation(fields: [user_id], references: [id])
  cartItems  CartItem[]
}

model CartItem {
  id          Int      @id @default(autoincrement())
  cart_id     Int
  products_id Int
  quantity    Int
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  cart        Cart     @relation(fields: [cart_id], references: [id])
  product     Product  @relation(fields: [products_id], references: [id], onDelete: Cascade)
}

model Order {
  id                Int                @id @default(autoincrement())
  user_id           Int
  status            OrderStatus
  created_at        DateTime           @default(now())
  updated_at        DateTime           @updatedAt
  user              User               @relation(fields: [user_id], references: [id])
  OrderCancellation OrderCancellation?
  orderItems        OrderItem[]
  payment           Payment?
  reviews           Review[]
  shippingAddress   ShippingAddress?
  shippingDetail ShippingDetail?
  notifications Notification[] 
}

model OrderItem {
  id                     Int       @id @default(autoincrement())
  order_id               Int
  products_id            Int
  quantity               Int
  price                  Int
  custom_note            String?
  created_at             DateTime  @default(now())
  updated_at             DateTime  @updatedAt
  partner_id             Int?
  notified_to_partner_at DateTime?
  order                  Order     @relation(fields: [order_id], references: [id])
  partner                Partner?  @relation(fields: [partner_id], references: [id])
  product                Product   @relation(fields: [products_id], references: [id], onDelete: Cascade)
}

model ShippingAddress {
  id         Int      @id @default(autoincrement())
  order_id   Int      @unique
  address    String
  destination_id          Int?
  destination_province    String?
  destination_city        String?
  destination_district    String?
  destination_subdistrict String?
  destination_zip_code    Int?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  order      Order    @relation(fields: [order_id], references: [id])
}

model ShippingDetail {
  id                 Int      @id @default(autoincrement())
  order_id          Int      @unique
  shipping_name     String?   
  service_name      String?   // e.g. REG, YES, EZ
  shipping_code     String?
  shipping_cost     Int?      // biaya kirim awal
  shipping_cashback Int?      // diskon atau subsidi ongkir
  shipping_cost_net Int?      // biaya ongkir bersih setelah cashback
  service_fee       Int?      // biaya layanan platform
  net_income        Int?      // pendapatan bersih partner
  etd               String?  // estimasi waktu pengiriman
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt
  order             Order    @relation(fields: [order_id], references: [id])
}


model Payment {
  id                Int            @id @default(autoincrement())
  order_id          Int            @unique
  amount            Int
  status            PaymentStatus
  method            PaymentMethod?
  snap_token        String?
  snap_redirect_url String?
  payment_info      String?
  created_at        DateTime       @default(now())
  updated_at        DateTime       @updatedAt
  order             Order          @relation(fields: [order_id], references: [id])
}

model OrderCancellation {
  id         Int      @id @default(autoincrement())
  order_id   Int      @unique
  user_id    Int
  reason     String
  created_at DateTime @default(now())
  order      Order    @relation(fields: [order_id], references: [id])
  user       User     @relation(fields: [user_id], references: [id])
}

model FormTemplate {
  id               Int         @id @default(autoincrement())
  title            String
  google_form_link String
  created_at       DateTime    @default(now())
  updated_at       DateTime    @updatedAt
  formEntries      FormEntry[]
  formFields       FormField[]
}

model FormEntry {
  id               Int              @id @default(autoincrement())
  form_template_id Int
  user_id          Int
  submitted_at     DateTime?
  formTemplate     FormTemplate     @relation(fields: [form_template_id], references: [id])
  user             User             @relation(fields: [user_id], references: [id])
  FormEntryValue   FormEntryValue[]
}

model FormField {
  id               Int              @id @default(autoincrement())
  form_template_id Int
  field_name       String
  field_type       String
  field_key        String
  FormEntryValue   FormEntryValue[]
  formTemplate     FormTemplate     @relation(fields: [form_template_id], references: [id])
}

model News {
  id         Int         @id @default(autoincrement())
  title      String
  content    String
  user_id    Int
  created_at DateTime    @default(now())
  updated_at DateTime    @updatedAt
  user       User        @relation(fields: [user_id], references: [id])
  newsMedia  NewsMedia[]
}

model NewsMedia {
  id          Int     @id @default(autoincrement())
  news_id     Int
  media_url   String
  media_type  String
  isThumbnail Boolean @default(false)
  news        News    @relation(fields: [news_id], references: [id])
}

model Review {
  id         Int      @id @default(autoincrement())
  user_id    Int
  product_id Int
  order_id   Int
  rating     Int
  comment    String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  order      Order    @relation(fields: [order_id], references: [id])
  product    Product  @relation(fields: [product_id], references: [id])
  user       User     @relation(fields: [user_id], references: [id])
}

model FormEntryValue {
  id            Int       @id @default(autoincrement())
  form_entry_id Int
  form_field_id Int
  value         String
  FormEntry     FormEntry @relation(fields: [form_entry_id], references: [id])
  FormField     FormField @relation(fields: [form_field_id], references: [id])
}

model AboutCompany {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  image       String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  media       AboutCompanyMedia[]
  visionMission AboutVisionMission[]
  organization AboutOrganization[]
  team        AboutTeam[]
}

model AboutCompanyMedia {
  id          Int      @id @default(autoincrement())
  about_id    Int
  media_url   String
  media_type  String
  description String?
  created_at  DateTime @default(now())
  isThumbnail Boolean @default(false)
  about       AboutCompany @relation(fields: [about_id], references: [id])
}

model AboutVisionMission {
  id          Int      @id @default(autoincrement())
  title       VisionMission
  description String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  about_id    Int
  about       AboutCompany @relation(fields: [about_id], references: [id])
}

model AboutOrganization {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  image       String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  about_id    Int
  about       AboutCompany @relation(fields: [about_id], references: [id])
}

model AboutTeam {
  id          Int      @id @default(autoincrement())
  name        String
  position    String
  image       String?
  description String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  about_id    Int
  about       AboutCompany @relation(fields: [about_id], references: [id])
}

enum VisionMission {
  VISI
  MISI
}

enum PaymentMethod {
  QRIS
  CREDIT_CARD
  BANK_TRANSFER
  COD
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
  CANCEL
  DENY
  EXPIRE
  REFUND
}

enum TransactionStatus {
  FAILED
  REJECTED
  EXPIRED
  CANCELED
  AUTHORIZED
  REFUNDED
  PENDING
  COMPLETED
  SUBMITTED
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELED
}
